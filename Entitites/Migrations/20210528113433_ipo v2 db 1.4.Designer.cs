// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ipo.Data;

namespace ipo.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210528113433_ipo v2 db 1.4")]
    partial class ipov2db14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ipo.Models.Exchange", b =>
                {
                    b.Property<Guid>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExchangeName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ExchangeId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("ipo.Models.FilterSubscription", b =>
                {
                    b.Property<Guid>("FilterSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("MinEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MinNonInstitutional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MinOthers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MinQualifiedInstitutional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("MinRetailIndividual")
                        .HasColumnType("real");

                    b.Property<float>("MinTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("FilterSubscriptionId");

                    b.ToTable("FilterSubscriptions");
                });

            modelBuilder.Entity("ipo.Models.IPO", b =>
                {
                    b.Property<Guid>("IPOId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Close")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("IssuePriceRs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("IssueSizeRsCr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("LotSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Open")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IPOId");

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.ToTable("IPOs");
                });

            modelBuilder.Entity("ipo.Models.IPOExchange", b =>
                {
                    b.Property<Guid>("IPOId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IPOId", "ExchangeId");

                    b.HasIndex("ExchangeId");

                    b.ToTable("IPOExchanges");
                });

            modelBuilder.Entity("ipo.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Employee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("NonInstitutional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("Others")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("QualifiedInstitutional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("RetailIndividual")
                        .HasColumnType("real");

                    b.Property<float>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ipo.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("FilterSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("FilterSubscriptionId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ipo.Models.IPO", b =>
                {
                    b.HasOne("ipo.Models.Subscription", "Subscription")
                        .WithOne("IPO")
                        .HasForeignKey("ipo.Models.IPO", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ipo.Models.IPOExchange", b =>
                {
                    b.HasOne("ipo.Models.Exchange", "Exchange")
                        .WithMany("IPOExchanges")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ipo.Models.IPO", "IPO")
                        .WithMany("IPOExchanges")
                        .HasForeignKey("IPOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("IPO");
                });

            modelBuilder.Entity("ipo.Models.User", b =>
                {
                    b.HasOne("ipo.Models.FilterSubscription", "FilterSubscription")
                        .WithOne("User")
                        .HasForeignKey("ipo.Models.User", "FilterSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterSubscription");
                });

            modelBuilder.Entity("ipo.Models.Exchange", b =>
                {
                    b.Navigation("IPOExchanges");
                });

            modelBuilder.Entity("ipo.Models.FilterSubscription", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ipo.Models.IPO", b =>
                {
                    b.Navigation("IPOExchanges");
                });

            modelBuilder.Entity("ipo.Models.Subscription", b =>
                {
                    b.Navigation("IPO");
                });
#pragma warning restore 612, 618
        }
    }
}
